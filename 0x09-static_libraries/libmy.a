!<arch>
_putchar.c/     1653678113  0     0     100666  259       `
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
return (write(1, &c, 1));
}

0-isupper.c/    1653639586  0     0     100666  280       `
#include "main.h"

/**
 * _isupper - check if the argument passed in
 * is a uppercase character
 *@c: the argument to be checked
 * Return: 1 if c is uppercase or 0 if c is not
 */

int _isupper(int c)
{
if (c >= 'A' && c <= 'Z')
{
return (1);

}
return (0);
}
0-memset.c/     1653640358  0     0     100666  416       `
#include "stdio.h"

/**
 * This function writes bytes to memory address
 *
 * @s: pointer to address where the bytes are going to be written
 * @b: the character to write to the memory address
 * @n: the number of bytes to write
 *
 * @return - (s) the pointer to the address
 */

char *_memset(char *s, char b, unsigned int size)
{
for (int i = 0; i < size; i++)
{
s[i] = b;

}
return (s);

}
0-putchar.c/    1653639106  0     0     100666  273       `
#include "main.h"
/**
 * main - Entry point
 *
 * Return: nothing, return void
 */

int main(void)
{
_putchar('_');
_putchar('p');
_putchar('u');
_putchar('t');
_putchar('c');
_putchar('h');
_putchar('a');
_putchar('r');
_putchar('\n');

return (0);
}

0-strcat.c/     1653640196  0     0     100666  348       `
#include "main.h"
/**
 * _strcat - concatenates two strings
 * @dest: input parameter string
 * @src: input parameter string
 *
 * Return: dest
 */
char *_strcat(char *dest, char *src)
{
int a;
int b;

a = 0;

while (dest[a] != 0)
{
a++;
}

b = 0;

while (src[b] != 0)
{
dest[a] = src[b];
a++;
b++;
}
return (dest);
}
100-atoi.c/     1653640066  0     0     100666  416       `
#include "main.h"

/**
 * _atoi - convert a string to an integer.
 * @s: the string to be comverted.
 *
 *Return: The integer value of the comverted string.
 */

int _atoi(char *s)
{

int sign = 1;
unsigned int num = 0;

do {

if (*s == '-')
sign *= -1;

else if (*s >= '0' && *s <= '9')
num = (num * 10) + (*s - '0');

else if (num > 0)
break;

} while (*s++);

return (num * sign);
}
1-isdigit.c/    1653639615  0     0     100666  233       `
#include "main.h"

/**
* _isdigit - checks for digit 0-9
*
* @c: the function parameter
*
*Return: 1 if c is a digit and 0 otherwise
*/

int _isdigit(int c)
{
if (c >= '0' && c <= '9')
{
return (1);
}
return (0);
}

1-memcpy.c/     1653640384  0     0     100666  368       `
#include "main.h"
/**
 *_memcpy - a function that copies memory area
 *@dest: memory where is stored
 *@src: memory where is copied
 *@n: number of bytes
 *
 *Return: copied memory with n byted changed
 */
char *_memcpy(char *dest, char *src, unsigned int n)
{
int r = 0;
int i = n;

for (; r < i; r++)
{
dest[r] = src[r];
n--;
}
return (dest);
}
1-strncat.c/    1653640216  0     0     100666  396       `

#include "main.h"
/**
 * _strncat - concatenates two strings
 * @dest: input parameter string
 * @src: input parameter string
 * @n: times to iterations
 *
 * Return: dest
 */
char *_strncat(char *dest, char *src, int n)
{
int a;
int b;

a = 0;

while (dest[a] != 0)
{
a++;
}

b = 0;

while (src[b] != 0 && b < n)
{
dest[a] = src[b];
a++;
b++;
}
return (dest);
}
2-strchr.c/     1653640440  0     0     100666  245       `
#include "main.h"
/**
 * _strchr - Entry point
 * @s: input
 * @c: input
 * Return: Always 0 (Success)
 */
char *_strchr(char *s, char c)
{
int i = 0;

for (; s[i] >= '\0'; i++)
{
if (s[i] == c)
return (&s[i]);
}
return (0);
}

2-strlen.c/     1653639728  0     0     100666  251       `

#include "main.h"
#include <string.h>

/**
 *  * _strlen - checks the length of a string
 *   * @s:input
 *    * Return: Always 0.
*/
int _strlen(char *s)
{
int length = 0;

while (*s != 0)
{
length++;
s++;
}

return (length);
}

2-strncpy.c/    1653640253  0     0     100666  421       `
#include "main.h"
/**
 * _strncpy - copies the string
 * @dest: array that returns
 * @src: the pointer that receive the string
 * @n: numbers of times for the iteration
 *
 * Return: the parameter dest.
 */
char *_strncpy(char *dest, char *src, int n)
{
int i;

i = 0;
while (i < n && src[i] != '\0')
{
dest[i] = src[i];
i++;
}

i = i;
while (i < n)
{
dest[i] = '\0';
i++;
}
return (dest);
}

3-islower.c/    1653639212  0     0     100666  189       `
#include "main.h"

/**
 * _islower - check for lower case letter
 * @c : character to check the case
 * Return:0 or 1
 */

int _islower(int c)
{
return (c >= 97 && c <= 122);
}

3-puts.c/       1653639758  0     0     100666  235       `
#include "main.h"
/**
* _puts - print a string followed by a new line
*@str: string to print
*Return: Nothing
*/
void _puts(char *str)
{
int i;

for (i = 0; *(str + i) != 0; i++)
{
_putchar(str[i]);
}
_putchar('\n');
}

3-strcmp.c/     1653640271  0     0     100666  305       `
#include "main.h"
/**
 * _strcmp - compares two strings
 * @s1: input parameter
 * @s2: input parameter
 *
 * Return: 0 if equal or b if is different
 */
int _strcmp(char *s1, char *s2)
{
int a = 0;
int b = 0;

while (s1[a] != '\0' && b == 0)
{
b = s1[a] - s2[a];
a++;
}
return (b);
}

3-strspn.c/     1653640458  0     0     100666  361       `
#include "main.h"
/**
 * _strspn - Entry point
 * @s: input
 * @accept: input
 * Return: Always 0 (Success)
 */
unsigned int _strspn(char *s, char *accept)
{
unsigned int n = 0;
int r;

while (*s)
{
for (r = 0; accept[r]; r++)
{
if (*s == accept[r])
{
n++;
break;
}
else if (accept[r + 1] == '\0')
return (n);
}
s++;
}
return (n);
}

4-isalpha.c/    1653639230  0     0     100666  206       `
#include "main.h"

/**
 * _isalpha - check for lower case letter
 * @c : character to check
 * Return:0 or 1
 */

int _isalpha(int c)
{
return ((c >= 97 && c <= 122) || (c >= 65 && c <= 90));
}
4-strpbrk.c/    1653640491  0     0     100666  287       `
#include "main.h"
/**
 * _strpbrk - Entry point
 * @s: input
 * @accept: input
 * Return: Always 0 (Success)
 */
char *_strpbrk(char *s, char *accept)
{
int k;

while (*s)
{
for (k = 0; accept[k]; k++)
{
if (*s == accept[k])
return (s);
}
s++;
}

return ('\0');
}

5-strstr.c/     1653640535  0     0     100666  368       `
#include "main.h"
/**
 * _strstr - Entry point
 * @haystack: input
 * @needle: input
 * Return: Always 0 (Success)
 */
char *_strstr(char *haystack, char *needle)
{
for (; *haystack != '\0'; haystack++)
{
char *l = haystack;
char *p = needle;

while (*l == *p && *p != '\0')
{
l++;
p++;
}

if (*p == '\0')
return (haystack);
}

return (0);
}
6-abs.c/        1653639259  0     0     100666  162       `
#include "main.h"

/**
 * _abs - return abs value
 * @n : number to check
 * Return:0 or 1
 */

int _abs(int n)
{

return (n >= 0 ? n : n * -1);

}
9-strcpy.c/     1653640026  0     0     100666  301       `
#include "main.h"
/**
* *_strcpy - copies the string pointed
*@dest: copie of the string
*@src: origin of the string
*Return: dest destine copie
*/
char *_strcpy(char *dest, char *src)
{
int i;

for (i = 0; src[i] != '\0'; i++)
{
dest[i] = src[i];
}
dest[i] = '\0';
return (dest);
}

